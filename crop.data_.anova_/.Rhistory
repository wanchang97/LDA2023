sum(!is.na(data.long$respons))
data.long.noNA <- na.omit(data.long)# reordered long table without NAs
summary(data.long.noNA)
View(data.long.noNA)
max(id)
max(data.long.noNA$id)
max(data.long.noNA$id)
data.long.noNA$id
data.long.noNA$id[length(data.long.noNA$id)]
length(data.long.noNA$id)
data.long.noNA$id[length(data.long.noNA$id)]
ummary(data.long.noNA)
summary(data.long.noNA)
data.long.noNA$id
data.long.noNA$j
sum(!is.na(data.long$respons))
dim(data)
dim(data.long)
dim(data.long.noNA)
# since the data dimension is large 9551 x 8, we can select random 30 data to have a look
set.seed(1)
selected <- sample(1:length(unique(data.long.noNA$id)),30,replace=T) # random samples and permutations
#selected.vector = as.vector(selected)
data.selected = data.long.noNA[(data.long.noNA$id %in% c(selected)), ]
# spaghettic plot
ggplot(data.selected,aes(x=time,y=respons,group=id,color=id))+geom_point()+ geom_line()
library(ggplot2)
dim(data.long.noNA)
# since the data dimension is large 9551 x 8, we can select random 30 data to have a look
set.seed(1)
selected <- sample(1:length(unique(data.long.noNA$id)),30,replace=T) # random samples and permutations
#selected.vector = as.vector(selected)
data.selected = data.long.noNA[(data.long.noNA$id %in% c(selected)), ]
# spaghettic plot
ggplot(data.selected,aes(x=time,y=respons,group=id,color=id))+geom_point()+ geom_line()
# spaghettic plot
ggplot(data.selected,aes(x=time,y=respons,group=id,color=id))+geom_point()+ geom_line()+theme_light
# spaghettic plot
ggplot(data.selected,aes(x=time,y=respons,group=id,color=id))+geom_point()+ geom_line()+theme_light()
ggplot(data.selected,aes(x=time,y=respons,group=id,color=id))+geom_point()+ geom_line()+theme_light()
ggplot(data.selected,aes(x=time,y=respons,group=id,color=male)) +geom_point()+ geom_line()+theme_light()
ggplot(data.selected,aes(x=time,y=respons,group=id,color=cardio)) +geom_point()+ geom_line()+theme_light()
ggplot(data.long.noNA,aes(x=time,y=respons,group=id,color=cardio)) +geom_point()+ geom_line()+theme_light()
ggplot(data.selected,aes(x=time,y=respons,group=id,color=cardio)) +geom_point()+ geom_line()+theme_light()
ggplot(data.selected,aes(x=time,y=respons,group=id,color=reject)) +geom_point()+ geom_line()+theme_light()
# Spaghetti Ggplot separated by male =1
p <- ggplot(data=data.selected,aes(x=time,y=respons,group=id))
p <- p + geom_line(col="grey")+stat_summary(aes(group=1),geom="line",fun=mean,linewidth=2)
p + facet_grid(~male,labeller=label_both)
# Spaghetti Ggplot separated by cardio
p <- ggplot(data=data.selected,aes(x=time,y=respons,group=id))
p <- p + geom_line(col="grey")+stat_summary(aes(group=1),geom="line",fun=mean,linewidth=2)
cardio.labs <- c("Cardio = 0","Cardio = 1")
p + facet_grid(~cardio,labeller = label_both)
# Spaghetti Ggplot separated by reject =1
p <- ggplot(data=data.selected,aes(x=time,y=respons,group=id))
p <- p + geom_line(col="grey")+stat_summary(aes(group=1),geom="line",fun=mean,linewidth=2)
p + facet_grid(~reject,labeller=label_both)
# Spaghetti Ggplot separated by male =1
p <- ggplot(data=data.long.noNA,aes(x=time,y=respons,group=id))
p <- p + geom_line(col="grey")+stat_summary(aes(group=1),geom="line",fun=mean,linewidth=2)
p + facet_grid(~male,labeller=label_both)
# Spaghetti Ggplot separated by cardio
p <- ggplot(data=data.long.noNA,aes(x=time,y=respons,group=id))
p <- p + geom_line(col="grey")+stat_summary(aes(group=1),geom="line",fun=mean,linewidth=2)
cardio.labs <- c("Cardio = 0","Cardio = 1")
p + facet_grid(~cardio,labeller = label_both)
# Spaghetti Ggplot separated by reject =1
p <- ggplot(data=data.long.noNA,aes(x=time,y=respons,group=id))
p <- p + geom_line(col="grey")+stat_summary(aes(group=1),geom="line",fun=mean,linewidth=2)
p + facet_grid(~reject,labeller=label_both)
# Box plot by sex
ggplot(data.selected,aes(x=as.factor(time),y=respons,fill=as.factor(male)))+
geom_boxplot(position=position_dodge(1))
# Box plot by cardio
ggplot(data.selected,aes(x=as.factor(time),y=respons,fill=as.factor(cardio)))+
geom_boxplot(position=position_dodge(1))
# Box plot by reject
ggplot(data.selected,aes(x=as.factor(time),y=respons,fill=as.factor(reject)))+
geom_boxplot(position=position_dodge(1))
# Box plot by sex
ggplot(data.long.noNA,aes(x=as.factor(time),y=respons,fill=as.factor(male)))+
geom_boxplot(position=position_dodge(1))
# Box plot by cardio
ggplot(data.long.noNA,aes(x=as.factor(time),y=respons,fill=as.factor(cardio)))+
geom_boxplot(position=position_dodge(1))
# Box plot by reject
ggplot(data.long.noNA,aes(x=as.factor(time),y=respons,fill=as.factor(reject)))+
geom_boxplot(position=position_dodge(1))
HcCorr = trenal.wide[,c(1:12)]
cor(HcCorr,use="complete.obs" ) # also COV for covariance
library("PerformanceAnalytics")
chart.Correlation(HcCorr,historgram=TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(sm)
library(rgl)#R graphic library
load("boston.Rdata")
names(boston.c) # Boston corrected
# "TOWN"    "TOWNNO"  "TRACT"   "LON"     "LAT"     "MEDV"
# "CMEDV"   "CRIM"    "ZN"      "INDUS"   "CHAS"    "NOX"     "RM"      "AGE"
# "DIS"     "RAD"     "TAX"     "PTRATIO" "B"       "LSTAT"
attach(boston.c)
# RM ~ LSTAT + AGE
a<-sm.regression(x=cbind(LSTAT,AGE), y=RM, h=c(2.85,10))
z<-a$estimate
y<-a$eval.points[,2]
x<-a$eval.points[,1]
persp(x,y,z, theta =40, phi = 10, d=4,xlab='LSTAT',ylab='AGE',zlab='RM',
box = TRUE, axes = TRUE,  nticks = 5,ticktype = "detailed")
persp3d(x,y,z, shininess= 5, col="green",xlab='LSTAT',ylab='AGE',zlab='RM')
points3d(x=LSTAT,y=AGE, z=RM,size=8)
# CMEDV ~ LSTAT + AGE
a<-sm.regression(x=cbind(LSTAT,AGE), y=CMEDV, h=c(2.85,3.5))
z<-a$estimate
y<-a$eval.points[,2]
x<-a$eval.points[,1]
persp(x,y,z, theta =-20, phi = 20, d=4,xlab='LSTAT',ylab='AGE',zlab='CMDEV')
persp3d(x,y,z, shininess= 5, col="green",xlab='LSTAT',ylab='AGE',zlab='CMDEV')
points3d(x=LSTAT,y=AGE, z=CMEDV,size=8)
library(mgcv)
help(package=mgcv)
help(gam)
th.pl.RM <- gam(RM ~ s(LSTAT,AGE, bs="tp"))
summary(th.pl.RM)
# perspective
vis.gam(th.pl.RM,se=0,theta =40, phi = 10, d=4,nticks=3)
text(-.61,-.1,'RM',srt=90)
# contour
vis.gam(th.pl.RM,se=0,plot.type="contour",contour.col=1)
points(LSTAT,AGE,col="blue")
te.pr.RM<-gam(RM ~ te(LSTAT,AGE, bs="cr"))
summary(te.pr.RM)
# perspective
vis.gam(te.pr.RM,se=0,theta =40, phi = 10, d=4,nticks=3)
text(-.61,-.1,'RM',srt=90)
# contour
vis.gam(te.pr.RM,se=0,plot.type="contour",contour.col=1)
points(LSTAT,AGE,col="blue")
gam.RM<-gam(RM ~ s(LSTAT)+ s(AGE))
summary(gam.RM)
# perspective
vis.gam(gam.RM,se=0,theta =40, phi = 10, d=4,nticks=3)
text(-.61,-.1,'RM',srt=90)
# contour
vis.gam(gam.RM,se=0,plot.type="contour",contour.col=1)
points(LSTAT,AGE,col="blue")
# GAM: Genrealized Additive Model. Functions g_k
op<-par(mfrow=c(1,2))
par(pty='s')
gam.RM<-gam(RM ~ s(LSTAT)+ s(AGE))#,sp=c(40,400))
plot.gam(gam.RM,se=FALSE,rug=FALSE)
par(op)
plot(gam.RW,shade=TRUE, residuals=TRUE)
We are using the following R function:
gam.RM<-gam(RM ~ s(LSTAT)+ s(AGE))#,sp=c(40,400))
plot(gam.AM,shade=TRUE)
plot(gam.RM,shade=TRUE)
plot(gam.RM,shade=TRUE)
plot(gam.RW,shade= TRUE,residuals=FALSE,pages=1,scale=0,select=2) # second variable
?gam
unique(boston.s$RAD)
# This is my question on long table and wide table transform:
library(readxl)
trenal <- read_excel("Trenal.XLS") # summary(trenal)
trenal= trenal[,-18] #remove a noninformative column const
# Continuous or discrete variables
trenal$id = as.factor(trenal$id)
trenal$j = as.factor(trenal$j)
trenal$time = as.factor(trenal$time)
trenal$male = as.factor(trenal$male)
trenal$cardio = as.factor(trenal$cardio)
trenal$reject = as.factor(trenal$reject)
setwd("C:/UPC Master/LongitudinalDataAnalysis/github/LDA2023")
# This is my question on long table and wide table transform:
library(readxl)
trenal <- read_excel("Trenal.XLS") # summary(trenal)
trenal= trenal[,-18] #remove a noninformative column const
# Continuous or discrete variables
trenal$id = as.factor(trenal$id)
trenal$j = as.factor(trenal$j)
trenal$time = as.factor(trenal$time)
trenal$male = as.factor(trenal$male)
trenal$cardio = as.factor(trenal$cardio)
trenal$reject = as.factor(trenal$reject)
# Change the name of respons
colnames(trenal)[19] <- "HC"
trenal.long = trenal[,13:20] # long table form
# Remove j
trenal.long = trenal.long[,-6]
trenal.long.noNA <- na.omit(trenal.long)# reordered
# Wide table form?
trenal.wide = as.data.frame(subset(trenal,trenal$j=="1"))[,1:18]
trenal.wide0 = trenal[,1:17] # directly taken from the raw data, where the id, age,cardio,reject are all not correct.
summary(trenal.wide)
dim(trenal.wide)
?subset
subset(trenal,trenal$j=="1")
knitr::opts_chunk$set(echo = TRUE,warning=FALSE,message=FALSE)
trenal= trenal[,-18] #remove a noninformative column const
# Continuous or discrete variables
trenal$id = as.factor(trenal$id)
trenal$j = as.factor(trenal$j)
library(readxl)
trenal <- read_excel("Trenal.XLS") # summary(trenal)
trenal= trenal[,-18] #remove a noninformative column const
# Continuous or discrete variables
trenal$id = as.factor(trenal$id)
trenal$j = as.factor(trenal$j)
trenal$time = as.factor(trenal$time)
trenal$male = as.factor(trenal$male)
trenal$cardio = as.factor(trenal$cardio)
trenal$reject = as.factor(trenal$reject)
# Change the name of respons
colnames(trenal)[19] <- "HC"
trenal.long = trenal[,13:20] # long table form
# Remove j
trenal.long = trenal.long[,-6]
trenal.long.noNA <- na.omit(trenal.long)# reordered
trenal.wide = as.data.frame(subset(trenal,trenal$j=="1"))[,1:18]
library(readxl)
trenal <- read_excel("Trenal.XLS") # summary(trenal)
trenal= trenal[,-18] #remove a noninformative column const
# Continuous or discrete variables
trenal$id = as.factor(trenal$id)
trenal$j = as.factor(trenal$j)
trenal$time = as.factor(trenal$time)
trenal$male = as.factor(trenal$male)
trenal$cardio = as.factor(trenal$cardio)
trenal$reject = as.factor(trenal$reject)
# Change the name of respons
colnames(trenal)[19] <- "HC"
trenal.long = trenal[,13:20] # long table form
# Remove j
trenal.long = trenal.long[,-6]
trenal.long.noNA <- na.omit(trenal.long)# reordered
trenal.wide = as.data.frame(subset(trenal,trenal$j=="1"))[,1:18]
View(trenal.wide)
View(trenal.wide)
summary(trenal.wide)
summary(trenal.long)
summary(trenal.long)
# trenal.long.three columns
trenal.long.threecolumns = trenal.long[,c(1,5,6)]
summary(trenal.long.threecolumns)
# trenal.long.three columns
trenal.long.threecolumns = trenal.long[,c(1,6,7)]
summary(trenal.long.threecolumns)
trenal.wide4 <- reshape(trenal.long.threecolumns,
direction = "wide",
timevar = "time",
idvar = "id",
v.names="HC")
summary(trenal.wide4)
dim(trenal.wide)
dim(trenal.wide4)
HcCorr = trenal.wide[,c(1:12)]
cor(HcCorr,use="complete.obs" ) # also COV for covariance
library("PerformanceAnalytics")
chart.Correlation(HcCorr,historgram=TRUE)
View( trenal.long)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
data.long <- trenal.long %>% # reordered long table
relocate(id) %>%
relocate(time,.after = id)%>%
relocate(HC,.after=time)
#summary(data.long)
sum(!is.na(data.long$HC))
data.long.noNA <- na.omit(data.long)# reordered long table without NAs
summary(data.long.noNA)
data_summary = data.frame(unclass(summary(data.long.noNA,maxsum=1160)),check.names=FALSE)
data.long.noNA$id[length(data.long.noNA$id)]
data_summary_wide
data_summary
summary(trenal.wide)
data_summary_wide
data_summary_wide = summary(trenal.wide)
data_summary_wide
View(data_summary)
View(trenal.long)
library(readxl)
trenal <- read_excel("Trenal.XLS") # summary(trenal)
trenal= trenal[,-18] #remove a noninformative column const
# Continuous or discrete variables
trenal$id = as.factor(trenal$id)
trenal$j = as.factor(trenal$j)
trenal$time = as.factor(trenal$time)
trenal$male = as.factor(trenal$male)
trenal$cardio = as.factor(trenal$cardio)
trenal$reject = as.factor(trenal$reject)
# Change the name of respons
colnames(trenal)[19] <- "HC"
trenal.long = trenal[,13:20] # long table form
# Remove j
trenal.long = trenal.long[,-6]
trenal.long.noNA <- na.omit(trenal.long)# reordered
trenal.wide = as.data.frame(subset(trenal,trenal$j=="1"))[,1:18]
data_summary_wide = summary(trenal.wide)
summary(trenal.wide)
summary(trenal.long)
ggplot(data.selected,aes(x=time,y=HC,group=id,color=id))+geom_point()+ geom_line()+theme_light()
# since the data dimension is large 9551 x 8, we can select random 30 data to have a look
set.seed(1)
selected <- sample(1:length(unique(data.long.noNA$id)),30,replace=T) # random samples and permutations
# To view to variance structure
ggplot(data.long.noNA,aes(x=as.factor(time),y=HC))+
geom_boxplot(position=position_dodge(1))+
labs(title="Box Plot of HC level for all indivuduals over time and the variance structure")
library(ggplot2)
# To view the mean structure of the HC for all individuals
ggplot(data.long.noNA,aes(x=as.factor(time),y=HC,group=id))  + geom_line(col="grey")+stat_summary(aes(group=1),geom="line",fun=mean,linewidth=2)+
labs(title="Line plot of HC level for all individuals overtime and the mean structure")
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
data.long <- trenal.long %>% # reordered long table
relocate(id) %>%
relocate(time,.after = id)%>%
relocate(HC,.after=time)
#summary(data.long)
sum(!is.na(data.long$HC))
data.long.noNA <- na.omit(data.long)# reordered long table without NAs
summary(data.long.noNA)
data_summary_long = data.frame(unclass(summary(data.long.noNA,maxsum=1160)),check.names=FALSE)
data.long.noNA$id[length(data.long.noNA$id)]
library(ggplot2)
# To view the mean structure of the HC for all individuals
ggplot(data.long.noNA,aes(x=as.factor(time),y=HC,group=id))  + geom_line(col="grey")+stat_summary(aes(group=1),geom="line",fun=mean,linewidth=2)+
labs(title="Line plot of HC level for all individuals overtime and the mean structure")
# To view to variance structure
ggplot(data.long.noNA,aes(x=as.factor(time),y=HC))+
geom_boxplot(position=position_dodge(1))+
labs(title="Box Plot of HC level for all indivuduals over time and the variance structure")
HcCorr = trenal.wide[,c(1:12)]
cor(HcCorr,use="complete.obs" ) # also COV for covariance
library("PerformanceAnalytics")
chart.Correlation(HcCorr,historgram=TRUE)
dim(data.long.noNA)
# since the data dimension is large 9551 x 8, we can select random 30 data to have a look
set.seed(1)
selected <- sample(1:length(unique(data.long.noNA$id)),30,replace=T) # random samples and permutations
#selected.vector = as.vector(selected)
data.selected = data.long.noNA[(data.long.noNA$id %in% c(selected)), ]
ggplot(data.selected,aes(x=time,y=HC,group=id,color=id))+geom_point()+ geom_line()+theme_light()
ggplot(data.selected,aes(x=time,y=HC,group=id,color=age))+geom_point()+ geom_line()+theme_light()
ggplot(data.long.noNA,aes(x=time,y=HC,group=id,color=age))+geom_point()+ geom_line()+theme_light()
install.packages("jtools")
library(jtools)
fit.age = lm(HC ~ time +age,data=data.long.noNA)
summ(fit.age)
fit1 <- lm(z~x+y)
x = rnorm(100)
y = rnorm(100,2,1)
z = x+ 2*y+rnorm(100)
fit1 <- lm(z~x+y)
fit2 <- lm(z~y+x)
fit3 <- lm(z~x+y+x:y)
anova.lmlist(fit1,fit3)
install.packages("dyn")
install.packages(c("ggplot2","ggpubr","tidyverse","broom","AICcmodavg"))
install.packages(c("ggplot2", "ggpubr", "tidyverse", "broom", "AICcmodavg"))
library(ggplot2)
library(ggpubr)
library(tidyverse)
library(broom)
library(AICcmodavg)
# Step 1: Load the data into R
#We will use the same dataset for all of our examples in this walkthrough. The only difference between the different analyses is how many independent variables we include and in what combination we include them
crop.data <- read.csv("crop.data.csv",header=TRUE,colClasses = c("factor","factor","factor","numeric
"))
setwd("C:/UPC Master/LongitudinalDataAnalysis/github/LDA2023/crop.data_.anova_")
# Step 1: Load the data into R
#We will use the same dataset for all of our examples in this walkthrough. The only difference between the different analyses is how many independent variables we include and in what combination we include them
crop.data <- read.csv("crop.data.csv",header=TRUE,colClasses = c("factor","factor","factor","numeric
"))
# check if the data has been imported correctly
summary(crop.data)
# Step 1: Load the data into R
#We will use the same dataset for all of our examples in this walkthrough. The only difference between the different analyses is how many independent variables we include and in what combination we include them
crop.data <- read.csv("crop.data.csv",header=TRUE,colClasses = c("factor","factor","factor","numeric
"))
# check if the data has been imported correctly
summary(crop.data)
# Step 1: Load the data into R
#We will use the same dataset for all of our examples in this walkthrough. The only difference between the different analyses is how many independent variables we include and in what combination we include them
crop.data <- read.csv("crop.data.csv",header=TRUE,colClasses = c("factor","factor","factor","numeric
"))
# Step 1: Load the data into R
#We will use the same dataset for all of our examples in this walkthrough. The only difference between the different analyses is how many independent variables we include and in what combination we include them
crop.data <- read.csv("crop.data.csv",header=TRUE,colClasses = c("factor","factor","factor","numeric"))
# check if the data has been imported correctly
summary(crop.data)
# Step 2 Perform the ANOVA
# ANOVA tests whether any of the group means are different from the overall mean of the data by checking the variance of each individual group against the overall variance of the data.
# If one or more groups falls outside the range of variation predicted by the null hypothesis (all group means are equal), then the test is statistically significant
# One-way ANOVA
# In the one-way ANOVA example
one.way <- aov(yield ~fertilizer,data = crop.data)
summary(one.way)
dim(crop.data)
two.way <- aov(yield~fertilizer+density,data=crop.data)
summary(two.way)
head(trenal.long)
trenal.long.male = (trenal.long[,3] == 1)
head(trenal.long.male)
trenal.long[,3]
is.na(trenal.long[,3])
knitr::opts_chunk$set(echo = TRUE,warning=FALSE,message=FALSE)
trenal.long.male = trenal.long[(trenal.long[,3] == 1)]
trenal.long.male = trenal.long[trenal.long[,3] == 1,]
sum(is.na(trenal.long.male$col))
sum(is.na(trenal.long.male$HC))
trenal.long.female = trenal.long[trenal.long[,3] == 0,]
sum(is.na(trenal.long.female$HC))
dim(trenal.long.male)
length(trenal.long.male)
trenal.long.male
summary(trenal.wide)
trenal.long.male = trenal.long[trenal.long$male == 1,]
male.NA = sum(is.na(trenal.long.male$HC))
male.number = dim(trenal.wide[trenal.wide$male== 1,])[1]
trenal.long.female = trenal.long[trenal.long$male == 0,]
female.NA = sum(is.na(trenal.long.female$HC))
male.number
trenal.long.male = trenal.long[trenal.long$male == 1,]
male.NA = sum(is.na(trenal.long.male$HC))
male.number = dim(trenal.wide[trenal.wide$male== 1,])[1]
trenal.long.female = trenal.long[trenal.long$male == 0,]
female.NA = sum(is.na(trenal.long.female$HC))
female.number = dim(trenal.wide[trenal.wide$male== 0,])[1]
female.NA.ratio = female.NA/female.number
male.NA.ratio
trenal.long.male = trenal.long[trenal.long$male == 1,]
male.NA = sum(is.na(trenal.long.male$HC))
male.number = dim(trenal.wide[trenal.wide$male== 1,])[1]
male.NA.ratio = male.NA/male.number
trenal.long.female = trenal.long[trenal.long$male == 0,]
female.NA = sum(is.na(trenal.long.female$HC))
female.number = dim(trenal.wide[trenal.wide$male== 0,])[1]
female.NA.ratio = female.NA/female.number
plot(c(male.NA.ratio,female.NA.ratio))
boxplot(c(male.NA.ratio,female.NA.ratio))
boxplot(c(male.NA.ratio,female.NA.ratio),c("male","female"))
boxplot(c(male.NA.ratio,female.NA.ratio),c(1,0))
male.NA.ratio
female.NA.ratio
# NA related to cardio?
trenal.long.cardio = trenal.long[trenal.long$cardio == 1,]
cardio.1.NA = sum(is.na(trenal.long.cardio$HC))
cardio.1.number = dim(trenal.wide[trenal.wide$cardio== 1,])[1]
cardio.1.NA.ratio = cardio.1.NA/cardio.1.number
trenal.long.cardio = trenal.long[trenal.long$cardio == 0,]
cardio.0.NA = sum(is.na(trenal.long.cardio$HC))
cardio.0.number = dim(trenal.wide[trenal.wide$cardio== 0,])[1]
cardio.0.NA.ratio = cardio.0.NA/cardio.0.number
cardio.1.NA
cardio.1.number
# NA related to gender?
trenal.wide.male = trenal.wide[trenal.wide$male == 1,]
male.NA = sum(is.na(trenal.wide.male$HC))
male.number = dim(trenal.wide[trenal.wide$male== 1,])[1]
male.NA.ratio = male.NA/male.number
trenal.wide.female = trenal.wide[trenal.wide$male == 0,]
female.NA = sum(is.na(trenal.wide.female$HC))
female.number = dim(trenal.wide[trenal.wide$male== 0,])[1]
female.NA.ratio = female.NA/female.number
#boxplot(c(male.NA.ratio,female.NA.ratio),c(1,0))
# NA related to gender?
trenal.wide.male = trenal.wide[trenal.wide$male == 1,]
male.NA = sum(is.na(trenal.wide.male$HC))
male.number = dim(trenal.wide[trenal.wide$male== 1,])[1]
male.NA.ratio = male.NA/male.number
trenal.wide.female = trenal.wide[trenal.wide$male == 0,]
female.NA = sum(is.na(trenal.wide.female$HC))
female.number = dim(trenal.wide[trenal.wide$male== 0,])[1]
female.NA.ratio = female.NA/female.number
#boxplot(c(male.NA.ratio,female.NA.ratio),c(1,0))
# NA related to cardio?
trenal.wide.cardio = trenal.wide[trenal.wide$cardio == 1,]
cardio.1.NA = sum(is.na(trenal.wide.cardio$HC))
cardio.1.number = dim(trenal.wide[trenal.wide$cardio== 1,])[1]
cardio.1.NA.ratio = cardio.1.NA/cardio.1.number
trenal.wide.cardio = trenal.wide[trenal.wide$cardio == 0,]
cardio.0.NA = sum(is.na(trenal.wide.cardio$HC))
cardio.0.number = dim(trenal.wide[trenal.wide$cardio== 0,])[1]
cardio.0.NA.ratio = cardio.0.NA/cardio.0.number
female.NA.ratio
female.NA
female.NA
trenal.wide.male = trenal.wide[trenal.wide$male == 1,]
head(trenal.wide.male)
male.number = dim(trenal.wide.male)[1]
male.NA = sum(is.na(trenal.wide.male$HC))
male.number
male.NA
trenal.wide.male = trenal.wide[trenal.wide$male == 1,]
trenal.long.male = trenal.long[trenal.long$male == 1,]
male.NA = sum(is.na(trenal.long.male$HC))
male.number = dim(trenal.wide.male)[1]
male.NA
head(trenal.long)
trenal.wide.male = trenal.wide[trenal.wide$male == 1,]
trenal.long.male = trenal.long[(trenal.long$male == 1)&(trenal.long$time == 0),]
trenal.wide.male = trenal.wide[trenal.wide$male == 1,]
trenal.long.male = trenal.long[(trenal.long$male == 1)&(trenal.long$time == 0),]
male.NA = sum(is.na(trenal.long.male$HC))
male.number = dim(trenal.wide.male)[1]
male.NA = sum(is.na(trenal.long.male$HC))
male.NA
trenal.long.male
head(trenal.long.male)
