group_by(male) %>%
dplyr::summarize(count_na = sum(is.na(respons)))
data_count2
last_measurement_male <- last_measurement %>%                                    # Count NA by group
group_by(male) %>%
dplyr::summarize(count_na = sum(is.na(respons)))
last_measurement
last_measurement <- subset(trenal.long, trenal.long$time == 10)
last_measurement_male <- last_measurement %>%                                    # Count NA by group
group_by(male) %>%
dplyr::summarize(count_na = sum(is.na(respons)))
last_measurement_male
last_measurement_reject <- last_measurement %>%                                    # Count NA by group
group_by(reject) %>%
dplyr::summarize(count_na = sum(is.na(respons)))
last_measurement_reject
last_measurement_cardio <- last_measurement %>%                                    # Count NA by group
group_by(cardio) %>%
dplyr::summarize(count_na = sum(is.na(respons)))
last_measurement_cardio
trenal.long.incr<-trenal.long_no_na %>%
filter(time == c(0, 10)) %>%
group_by(id) %>%
mutate(incr = max(respons) - min (respons), one = 1) %>%
filter(!incr %in% 0)
boxplot(trenal.long.incr$incr)
trenal.long.incr
ggplot(trenal.long.incr,aes(x=one,y=respons))+geom_boxplot()+theme_light()
trenal.long.incr
boxplot(trenal.long.incr$incr)
#REMOVE MISSINGS HERE
modlist1 <- lmList (respons ~ time, trenal_grouped1 , na.action = na.pass)
#plot(intervals(modlist1))
#plot(trenal_grouped)
modlist1
#attributes(modlist1)
beta0<- coef(modlist1)[,1]
beta1<- coef(modlist1)[,2]
bbdd<-data.frame(id=as.numeric(attributes(modlist1)$names),
beta0=coef(modlist1)[,1],beta1=coef(modlist1)[,2])
bbdd <- merge(trenal.long, bbdd[,c("id","beta0", "beta1")], by.x = "id", all.x = T)
bbdd <- bbdd[order(bbdd[,1]),]
ggplot(bbdd, aes(x=beta0, y=beta1)) + geom_point()
ggplot(bbdd, aes(x=beta0, y=beta1, color=male)) + geom_point()
ggplot(bbdd, aes(x=beta0, y=beta1, color=reject)) + geom_point()
ggplot(bbdd, aes(x=beta0, y=beta1, color=cardio)) + geom_point()
#install.packages('dplyr', repos = 'https://cloud.r-project.org')
library(dplyr)
bbdd %>%
group_by(male) %>%
summarize(cor=cor(beta0, beta1))
bbdd %>%
group_by(cardio) %>%
summarize(cor=cor(beta0, beta1))
bbdd %>%
group_by(reject) %>%
summarize(cor=cor(beta0, beta1))
# Fit a model for the intercept
modbeta0<-lm(beta0~male+cardio,bbdd)
summary(modbeta0)
confint(modbeta0)
### Fit a model for the slope
# All the variables should be included
modbeta1<-lm(beta1~male+cardio,bbdd)
summary(modbeta1)
confint(modbeta1)
#### END OF  EXERCISE
summary(trenal.long$respons)
trenal.long.na<-trenal.long %>%
filter(is.na(respons) == T)
trenal_na_male <- aggregate(trenal.long.na$respons, by=list(trenal.long.na$male), FUN=length)
trenal_na_male
p<-ggplot(data=trenal_na_male, aes(x=Group.1, y=x)) +
geom_bar(stat="identity")
p
ggplot(data=trenal_na_male, aes(x=Group.1, y=x)) +
geom_bar(stat="identity")
trenal_na_reject <- aggregate(trenal.long.na$respons, by=list(trenal.long.na$reject), FUN=length)
trenal_na_reject
ggplot(data=trenal_na_reject, aes(x=Group.1, y=x)) +
geom_bar(stat="identity")
trenal_na_cardio <- aggregate(trenal.long.na$respons, by=list(trenal.long.na$cardio), FUN=length)
trenal_na_cardio
ggplot(data=trenal_na_cardio, aes(x=Group.1, y=x)) +
geom_bar(stat="identity")
ggplot(data=trenal_na_male, aes(x=Group.1, y=x)) +
geom_bar(stat="identity")+
ggtitle("Outcome distribution by gender")
ggplot(data=trenal_na_male, aes(x=Group.1, y=x, color = Group.1)) +
geom_bar(stat="identity")+
ggtitle("Outcome distribution by gender")
ggplot(data=trenal_na_male, aes(x=Group.1, y=x, color = Group.1)) +
geom_bar()+
ggtitle("Outcome distribution by gender")
ggplot(data=trenal_na_male, aes(x=Group.1, y=x, color = Group.1)) +
geom_bar(stat="identity")+
ggtitle("Outcome distribution by gender")
ggplot(data=trenal_na_reject, aes(x=Group.1, y=x, color = Group.1)) +
geom_bar(stat="identity")
ggplot(data=trenal_na_cardio, aes(x=Group.1, y=x, color = Group.1)) +
geom_bar(stat="identity")
ggplot(data=trenal_na_reject, aes(x=Group.1, y=x, color = Group.1)) +
geom_bar(stat="identity")+
ggtitle("Outcome distribution by rejection level")
ggplot(data=trenal_na_cardio, aes(x=Group.1, y=x, color = Group.1)) +
geom_bar(stat="identity")+
ggtitle("Outcome distribution by cardio level")
#Boxplot
meanbeta0bymale<-tapply(bbdd$beta0,as.factor(bbdd$male),mean,na.rm=T)
meanbeta1bymale<-tapply(bbdd$beta1,as.factor(bbdd$male),mean,na.rm=T)
meanbeta0byreject<-tapply(bbdd$beta0,as.factor(bbdd$reject),mean,na.rm=T)
meanbeta1byreject<-tapply(bbdd$beta1,as.factor(bbdd$reject),mean,na.rm=T)
meanbeta0bycardio<-tapply(bbdd$beta0,as.factor(bbdd$cardio),mean,na.rm=T)
meanbeta1bycardio<-tapply(bbdd$beta1,as.factor(bbdd$cardio),mean,na.rm=T)
(meanbeta0bymale<-tapply(bbdd$beta0,as.factor(bbdd$male),mean,na.rm=T)
(meanbeta1bymale<-tapply(bbdd$beta1,as.factor(bbdd$male),mean,na.rm=T)
(meanbeta0bymale<-tapply(bbdd$beta0,as.factor(bbdd$male),mean,na.rm=T))
(meanbeta1bymale<-tapply(bbdd$beta1,as.factor(bbdd$male),mean,na.rm=T))
(meanbeta0byreject<-tapply(bbdd$beta0,as.factor(bbdd$reject),mean,na.rm=T))
(meanbeta1byreject<-tapply(bbdd$beta1,as.factor(bbdd$reject),mean,na.rm=T))
(meanbeta0bycardio<-tapply(bbdd$beta0,as.factor(bbdd$cardio),mean,na.rm=T))
(meanbeta1bycardio<-tapply(bbdd$beta1,as.factor(bbdd$cardio),mean,na.rm=T))
#Let's check if they are quite related ?inverse correlation?
with(bbdd,cor(beta0,beta1))
ggplot(bbdd, aes(x=beta0, y=beta1)) + geom_point()
ggplot(bbdd, aes(x=beta0, y=beta1, color=male)) + geom_point()
ggplot(bbdd, aes(x=beta0, y=beta1, color=reject)) + geom_point()
ggplot(bbdd, aes(x=beta0, y=beta1, color=cardio)) + geom_point()
ggplot(bbdd, aes(x=beta0, y=beta1, color=male)) + geom_point()
ggplot(bbdd, aes(x=beta0, y=beta1, color=male)) +
geom_point()+
geom_smooth(method='lm', formula= y~x)
ggplot(bbdd, aes(x=beta0, y=beta1, color=reject)) + geom_point()+
geom_smooth(method='lm', formula= y~x)
ggplot(bbdd, aes(x=beta0, y=beta1, color=cardio)) + geom_point()+
geom_smooth(method='lm', formula= y~x)
ggplot(bbdd, aes(x=beta0, y=beta1, color=cardio)) + geom_point()+
geom_smooth(method='lm', formula= y~x)
ggplot(bbdd, aes(x=beta0, y=beta1)) + geom_point()
dim(trenal)
bbdd<-data.frame(id=as.numeric(attributes(modlist1)$names),
beta0=coef(modlist1)[,1],beta1=coef(modlist1)[,2])
bbdd <- merge(trenal.long, bbdd[,c("id","beta0", "beta1")], by.x = "id", all.x = T)
bbdd <- bbdd[order(bbdd[,1]),]
View(bbdd)
ggplot(bbdd, aes(x=beta0, y=beta1)) + geom_point()
(meanbeta0bymale<-tapply(bbdd$beta0,as.factor(bbdd$male),mean,na.rm=T))
(meanbeta1bymale<-tapply(bbdd$beta1,as.factor(bbdd$male),mean,na.rm=T))
ggplot(bbdd, aes(x=beta0, y=beta1, color=male)) +
geom_point()+
geom_smooth(method='lm', formula= y~x)
(meanbeta0byreject<-tapply(bbdd$beta0,as.factor(bbdd$reject),mean,na.rm=T))
(meanbeta1byreject<-tapply(bbdd$beta1,as.factor(bbdd$reject),mean,na.rm=T))
ggplot(bbdd, aes(x=beta0, y=beta1, color=reject)) + geom_point()+
geom_smooth(method='lm', formula= y~x)
(meanbeta0bycardio<-tapply(bbdd$beta0,as.factor(bbdd$cardio),mean,na.rm=T))
(meanbeta1bycardio<-tapply(bbdd$beta1,as.factor(bbdd$cardio),mean,na.rm=T))
ggplot(bbdd, aes(x=beta0, y=beta1, color=cardio)) + geom_point()+
geom_smooth(method='lm', formula= y~x)
View(trenal_grouped1)
View(trenal_grouped2)
View(trenal_grouped3)
# Fit a model for the intercept
modbeta0<-lm(beta0~male+cardio,bbdd)
summary(modbeta0)
confint(modbeta0)
### Fit a model for the slope
# All the variables should be included
modbeta1<-lm(beta1~male+cardio,bbdd)
summary(modbeta1)
confint(modbeta1)
trenal.lm<-lm(respons ~ time, data = trenal.long)
trenal.lm2 <- lm(respons ~ time + male, data = trenal.long)
trenal.lm3 <- lm(respons ~ time + male + reject, data = trenal.long)
trenal.lm4 <- lm(respons ~ time + male + cardio, data = trenal.long)
trenal.lm5 <- lm(respons ~ time + male + reject + cardio, data = trenal.long)
trenal.lm6 <- lm(respons ~ time + male + reject + reject:time, data = trenal.long)
anova(trenal.lm, trenal.lm2, trenal.lm3, trenal.lm4, trenal.lm5, trenal.lm6)
anova(trenal.lm3, trenal.lm5)
trenal.lm<-lm(respons ~ time, data = trenal.long)
trenal.lm2 <- lm(respons ~ time + male, data = trenal.long)
trenal.lm3 <- lm(respons ~ time + male + age, data = trenal.long)
trenal.lm4 <- lm(respons ~ time + male + age + reject, data = trenal.long)
trenal.lm5 <- lm(respons ~ time + male + age + cardio, data = trenal.long)
trenal.lm6 <- lm(respons ~ time + male + age + reject + cardio, data = trenal.long)
trenal.lm7 <- lm(respons ~ time + male + age + reject + reject:time, data = trenal.long)
anova(trenal.lm, trenal.lm2, trenal.lm3, trenal.lm4, trenal.lm5, trenal.lm6)
last_measurement <- subset(trenal.long, trenal.long$time == 10)
summary(last_measurement)
#Check the mean and everything about last point response
last_measurement_male <- last_measurement %>%                                    # Count NA by group
group_by(male) %>%
dplyr::summarize(count_na = sum(is.na(respons)))
last_measurement_male
trenal.long.na<-trenal.long %>%
filter(is.na(respons) == T)
trenal_na_male <- aggregate(trenal.long.na$respons, by=list(trenal.long.na$male), FUN=length)
trenal_na_male
ggplot(data=trenal_na_male, aes(x=Group.1, y=x, color = Group.1)) +
geom_bar(stat="identity")+
ggtitle("Outcome distribution by gender")
ggplot(data=trenal_na_reject, aes(x=Group.1, y=x, color = Group.1)) +
geom_bar(stat="identity")+
ggtitle("Outcome distribution by rejection level")
ggplot(data=trenal_na_cardio, aes(x=Group.1, y=x, color = Group.1)) +
geom_bar(stat="identity")+
ggtitle("Outcome distribution by cardio level")
library(readxl)
trenal <- read_excel("Trenal.XLS") # summary(trenal)
trenal= trenal[,-18] #remove a noninformative column const
# Continuous or discrete variables
trenal$id = as.factor(trenal$id)
trenal$j = as.factor(trenal$j)
#trenal$time = as.factor(trenal$time)
trenal$male = as.factor(trenal$male)
trenal$cardio = as.factor(trenal$cardio)
trenal$reject = as.factor(trenal$reject)
# Change the name of respons
colnames(trenal)[19] <- "HC"
trenal.long = trenal[,13:20] # long table form
# Remove j
trenal.long = trenal.long[,-6]
trenal.long.unique <- trenal.long[match( unique(trenal.long$id), trenal.long$id),]
trenal.long.noNA <- na.omit(trenal.long)
# Wide table form
trenal.wide = as.data.frame(subset(trenal,trenal$j=="1"))[,1:18] # 1160 x 18
trenal.long_no_na <- na.omit(trenal.long)
trenal_grouped1<-groupedData(respons~time|id,trenal.long_no_na, inner = ~ male, labels=list(y="level of Haematocrit"),units=list(y="level of Haematocrit "))
library(readxl)
trenal <- read_excel("Trenal.XLS") # summary(trenal)
trenal= trenal[,-18] #remove a noninformative column const
# Continuous or discrete variables
trenal$id = as.factor(trenal$id)
trenal$j = as.factor(trenal$j)
#trenal$time = as.factor(trenal$time)
trenal$male = as.factor(trenal$male)
trenal$cardio = as.factor(trenal$cardio)
trenal$reject = as.factor(trenal$reject)
# Change the name of respons
colnames(trenal)[19] <- "HC"
trenal.long = trenal[,13:20] # long table form
# Remove j
trenal.long = trenal.long[,-6]
trenal.long.unique <- trenal.long[match( unique(trenal.long$id), trenal.long$id),]
trenal.long.noNA <- na.omit(trenal.long)
# Wide table form
trenal.wide = as.data.frame(subset(trenal,trenal$j=="1"))[,1:18] # 1160 x 18
trenal.long_no_na <- na.omit(trenal.long)
trenal_grouped1<-groupedData(respons~time|id,trenal.long_no_na, inner = ~ male, labels=list(y="level of Haematocrit"),units=list(y="level of Haematocrit "))
View(trenal.long)
trenal.long_no_na <- na.omit(trenal.long)
trenal_grouped1<-groupedData(HC~time|id,trenal.long_no_na, inner = ~ male, labels=list(y="level of Haematocrit"),units=list(y="level of Haematocrit "))
trenal_grouped2<-groupedData(HC~time|id,trenal.long_no_na, inner = ~ reject, labels=list(y="level of Haematocrit"),units=list(y="level of Haematocrit "))
trenal_grouped3<-groupedData(HC~time|id,trenal.long_no_na, inner = ~ cardio, labels=list(y="level of Haematocrit"),units=list(y="level of Haematocrit "))
#plot(trenal_grouped1, inner =  T, key = F)
#plot(trenal_grouped2, inner = T, key = F)
#plot(trenal_grouped3, inner = T, key = F)
#here, we do not declare any group, but I should group by male, reject or cardio
#outer: time dependent
#inner: not time dependent (male, )
#REMOVE MISSINGS HERE
modlist1 <- lmList (HC ~ time, trenal_grouped1 , na.action = na.pass)
#plot(intervals(modlist1))
#plot(trenal_grouped)
#REMOVE MISSINGS HERE
modlist1 <- lmList (HC ~ time, trenal_grouped1 , na.action = na.pass)
#plot(intervals(modlist1))
#plot(trenal_grouped)
#attributes(modlist1)
beta0<- coef(modlist1)[,1]
beta1<- coef(modlist1)[,2]
coef(modlist1)
knitr::kable(bbdd, "pipe")
library(readxl, knitr)
knitr::kable(bbdd, "pipe")
bbdd<-data.frame(id=as.numeric(attributes(modlist1)$names),
beta0=coef(modlist1)[,1],beta1=coef(modlist1)[,2])
bbdd <- merge(trenal.long, bbdd[,c("id","beta0", "beta1")], by.x = "id", all.x = T)
bbdd <- bbdd[order(bbdd[,1]),]
knitr::kable(bbdd, "pipe")
library(readxl, knitr)
trenal <- read_excel("Trenal.XLS") # summary(trenal)
trenal= trenal[,-18] #remove a noninformative column const
# Continuous or discrete variables
trenal$id = as.factor(trenal$id)
trenal$j = as.factor(trenal$j)
#trenal$time = as.factor(trenal$time)
trenal$male = as.factor(trenal$male)
trenal$cardio = as.factor(trenal$cardio)
trenal$reject = as.factor(trenal$reject)
# Change the name of respons
colnames(trenal)[19] <- "HC"
trenal.long = trenal[,13:20] # long table form
# Remove j
trenal.long = trenal.long[,-6]
trenal.long.unique <- trenal.long[match( unique(trenal.long$id), trenal.long$id),]
trenal.long.noNA <- na.omit(trenal.long)
# Wide table form
trenal.wide = as.data.frame(subset(trenal,trenal$j=="1"))[,1:18] # 1160 x 18
trenal.long_no_na <- na.omit(trenal.long)
trenal_grouped1<-groupedData(HC~time|id,trenal.long_no_na, inner = ~ male, labels=list(y="level of Haematocrit"),units=list(y="level of Haematocrit "))
trenal_grouped2<-groupedData(HC~time|id,trenal.long_no_na, inner = ~ reject, labels=list(y="level of Haematocrit"),units=list(y="level of Haematocrit "))
trenal_grouped3<-groupedData(HC~time|id,trenal.long_no_na, inner = ~ cardio, labels=list(y="level of Haematocrit"),units=list(y="level of Haematocrit "))
#plot(trenal_grouped1, inner =  T, key = F)
#plot(trenal_grouped2, inner = T, key = F)
#plot(trenal_grouped3, inner = T, key = F)
#here, we do not declare any group, but I should group by male, reject or cardio
#outer: time dependent
#inner: not time dependent (male, )
library(readxl, knitr)
trenal <- read_excel("Trenal.XLS") # summary(trenal)
trenal= trenal[,-18] #remove a noninformative column const
# Continuous or discrete variables
trenal$id = as.factor(trenal$id)
trenal$j = as.factor(trenal$j)
#trenal$time = as.factor(trenal$time)
trenal$male = as.factor(trenal$male)
trenal$cardio = as.factor(trenal$cardio)
trenal$reject = as.factor(trenal$reject)
# Change the name of respons
colnames(trenal)[19] <- "HC"
trenal.long = trenal[,13:20] # long table form
# Remove j
trenal.long = trenal.long[,-6]
trenal.long.unique <- trenal.long[match( unique(trenal.long$id), trenal.long$id),]
trenal.long.noNA <- na.omit(trenal.long)
# Wide table form
trenal.wide = as.data.frame(subset(trenal,trenal$j=="1"))[,1:18] # 1160 x 18
?knit
bbdd<-data.frame(id=as.numeric(attributes(modlist1)$names),
beta0=coef(modlist1)[,1],beta1=coef(modlist1)[,2])
bbdd <- merge(trenal.long, bbdd[,c("id","beta0", "beta1")], by.x = "id", all.x = T)
bbdd <- bbdd[order(bbdd[,1]),]
knitr::kable(bbdd, "pipe")
ggplot(bbdd, aes(x=beta0, y=beta1)) + geom_point()
(meanbeta0bymale<-tapply(bbdd$beta0,as.factor(bbdd$male),mean,na.rm=T))
(meanbeta1bymale<-tapply(bbdd$beta1,as.factor(bbdd$male),mean,na.rm=T))
ggplot(bbdd, aes(x=beta0, y=beta1, color=male)) +
geom_point()+
geom_smooth(method='lm', formula= y~x)
ggplot(bbdd, aes(x=beta0, y=beta1, color=male)) +
geom_point()+
geom_smooth(method='lm', formula= y~x)+
ggtitle("Betas comparison by Gender")
ggplot(bbdd, aes(x=beta0, y=beta1, color=reject)) + geom_point()+
geom_smooth(method='lm', formula= y~x)+
ggtitle("Betas comparison by Rejection Level")
ggplot(bbdd, aes(x=beta0, y=beta1, color=cardio)) + geom_point()+
geom_smooth(method='lm', formula= y~x)+
ggtitle("Betas comparison by Rejection Level")
ggplot(bbdd, aes(x=beta0, y=beta1, color=cardio)) + geom_point()+
geom_smooth(method='lm', formula= y~x)+
ggtitle("Betas comparison by Cardio Level")
ggplot(bbdd, aes(x=beta0, y=beta1)) + geom_point()
+ ggtitle("Betas comparison")
ggplot(bbdd, aes(x=beta0, y=beta1)) + geom_point() + ggtitle("Betas comparison")
ggplot(bbdd, aes(x=beta0, y=beta1)) + geom_point() + ggtitle("Beta comparison")
# Fit a model for the intercept
modbeta0<-lm(beta0~male + cardio + age,bbdd)
summary(modbeta0)
confint(modbeta0)
### Fit a model for the slope
# All the variables should be included
modbeta1<-lm(beta1~male + cardio + age,bbdd)
summary(modbeta1)
confint(modbeta1)
trenal.long_no_na <- na.omit(trenal.long)
trenal_grouped<-groupedData(HC~time|id,trenal.long_no_na, inner = ~ male, labels=list(y="level of Haematocrit"),units=list(y="level of Haematocrit "))
modlist1 <- lmList (HC ~ time, trenal_grouped , na.action = na.pass)
#attributes(modlist1)
beta0<- coef(modlist1)[,1]
beta1<- coef(modlist1)[,2]
bbdd<-data.frame(id=as.numeric(attributes(modlist1)$names),
beta0=coef(modlist1)[,1],beta1=coef(modlist1)[,2])
bbdd <- merge(trenal.long, bbdd[,c("id","beta0", "beta1")], by.x = "id", all.x = T)
bbdd <- bbdd[order(bbdd[,1]),]
modbeta0<-lm(beta0~male + cardio + age,bbdd)
summary(modbeta0)
confint(modbeta0)
### Fit a model for the slope
modbeta1<-lm(beta1~male + cardio + age,bbdd)
summary(modbeta1)
confint(modbeta1)
?groupedData
library(readxl, knitr, nlme
trenal <- read_excel("Trenal.XLS") # summary(trenal)
library(readxl, knitr, nlme)
install.packages("pacman")
library(pacman)
p_load(readxl, knitr, nlme)
trenal <- read_excel("Trenal.XLS") # summary(trenal)
trenal= trenal[,-18] #remove a noninformative column const
# Continuous or discrete variables
trenal$id = as.factor(trenal$id)
trenal$j = as.factor(trenal$j)
#trenal$time = as.factor(trenal$time)
trenal$male = as.factor(trenal$male)
trenal$cardio = as.factor(trenal$cardio)
trenal$reject = as.factor(trenal$reject)
# Change the name of respons
colnames(trenal)[19] <- "HC"
trenal.long = trenal[,13:20] # long table form
# Remove j
trenal.long = trenal.long[,-6]
trenal.long.unique <- trenal.long[match( unique(trenal.long$id), trenal.long$id),]
trenal.long.noNA <- na.omit(trenal.long)
# Wide table form
trenal.wide = as.data.frame(subset(trenal,trenal$j=="1"))[,1:18] # 1160 x 18
install.packages("pacman")
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
#install.packages("nlme")
library(readxl, knitr, nlme)
#install.packages("nlme")
library(readxl, knitr, nlme)
install.packages("nlme")
library(readxl, knitr, nlme)
install.packages("nlme")
library(readxl, knitr, nlme)
install.packages("nlme")
install.packages("nlme")
#install.packages("nlme")
library(readxl, knitr, nlme)
#install.packages("pacman")
library(pacman)
p_load(readxl, magrittr, dplyr, lattice, ggplot2, nlme)
library(readxl)
trenal <- read_excel("Trenal.XLS")
head(trenal)
dim(trenal)
trenal= trenal[,-18]
summary(trenal)
trenal.long = trenal[,13:20]
summary(trenal.long)
trenal.long$id = as.factor(trenal.long$id)
trenal.long$j = as.factor(trenal.long$j)
trenal.long$male = as.factor(trenal.long$male)
trenal.long$cardio = as.factor(trenal.long$cardio)
trenal.long$reject = as.factor(trenal.long$reject)
data <- trenal.long %>%
relocate(id) %>%
relocate(j,.after=id)%>%
relocate(time,.after = j)%>%
relocate(respons,.after=time)
summary(data)
Plot1<-xyplot(respons ~ time, groups = id,
data = trenal.long,
type = "l" ,xlab="Years after transplation",ylab="Levels of Haematocrit after transplation")
#add title
set.seed(1)
selected <- sample(1:length(unique(trenal.long$id)),100,replace=T)
data.selected = trenal.long[(trenal.long$id %in% c(selected)), ]
(Plot2<-xyplot(respons ~ time, groups = id,
data = data.selected,
type = "l" ,xlab="Years after transplation",ylab="Levels of Haematocrit after transplation"))
ggplot(data.selected,aes(x=time,y=respons,group=id,color=id))+geom_point()+ geom_line()+theme_light()+ theme(legend.position = "none")
ggplot(data.selected,aes(x=time,y=respons,group=id,color=male))+geom_point()+ geom_line()+theme_light()
ggplot(data.selected,aes(x=male,y=respons))+geom_boxplot()+theme_light()
ggplot(data.selected,aes(x=time,y=respons,group=id,color=cardio))+geom_point()+ geom_line()+theme_light()
ggplot(data.selected,aes(x=cardio,y=respons))+geom_boxplot()+theme_light()
ggplot(data.selected,aes(x=time,y=respons,group=id,color=reject))+geom_point()+ geom_line()+theme_light()
ggplot(data.selected,aes(x=reject,y=respons))+geom_boxplot()+theme_light()
last_measurement <- subset(trenal.long, trenal.long$time == 10)
summary(last_measurement)
#Check the mean and everything about last point response
last_measurement$resp_na<-ifelse(is.na(last_measurement$respons) == T, 1, 0)
last_measurement$resp_na<- as.factor(last_measurement$resp_na)
summary(last_measurement$resp_na)
last_measurement_male <- last_measurement %>%                                    # Count NA by group
group_by(male) %>%
dplyr::summarize(count_na = sum(is.na(respons)))
last_measurement_male
last_measurement_reject <- last_measurement %>%                                    # Count NA by group
group_by(reject) %>%
dplyr::summarize(count_na = sum(is.na(respons)))
last_measurement_reject
last_measurement_cardio <- last_measurement %>%                                    # Count NA by group
group_by(cardio) %>%
dplyr::summarize(count_na = sum(is.na(respons)))
last_measurement_cardio
trenal.long.incr<-trenal.long_no_na %>%
filter(time == c(0, 10)) %>%
group_by(id) %>%
mutate(incr = max(respons) - min (respons), one = 1) %>%
filter(!incr %in% 0)
trenal.lm<-lm(respons ~ time, data = trenal.long)
trenal.lm2 <- lm(respons ~ time + male, data = trenal.long)
trenal.lm3 <- lm(respons ~ time + male + age, data = trenal.long)
trenal.lm4 <- lm(respons ~ time + male + age + reject, data = trenal.long)
trenal.lm5 <- lm(respons ~ time + male + age + cardio, data = trenal.long)
trenal.lm6 <- lm(respons ~ time + male + age + reject + cardio, data = trenal.long)
trenal.lm7 <- lm(respons ~ time + male + age + reject + reject:time, data = trenal.long)
anova(trenal.lm, trenal.lm2, trenal.lm3, trenal.lm4, trenal.lm5, trenal.lm6)
anova(trenal.lm3, trenal.lm5)
trenal.wide = trenal[,1:17]
dataCorr<- trenal.wide[, c(1:12)]
cor(dataCorr,use="complete.obs") #Also COV for covarianza
cov(dataCorr,use="complete.obs")
library("PerformanceAnalytics")
chart.Correlation(dataCorr , histogram=T)
trenal.long_no_na <- na.omit(trenal.long)
trenal_grouped1<-groupedData(respons~time|id,trenal.long_no_na, inner = ~ male, labels=list(y="level of Haematocrit"),units=list(y="level of Haematocrit "))
trenal_grouped2<-groupedData(respons~time|id,trenal.long_no_na, inner = ~ reject, labels=list(y="level of Haematocrit"),units=list(y="level of Haematocrit "))
trenal_grouped3<-groupedData(respons~time|id,trenal.long_no_na, inner = ~ cardio, labels=list(y="level of Haematocrit"),units=list(y="level of Haematocrit "))
#plot(trenal_grouped1, inner =  T, key = F)
#plot(trenal_grouped2, inner = T, key = F)
#plot(trenal_grouped3, inner = T, key = F)
#here, we do not declare any group, but I should group by male, reject or cardio
#outer: time dependent
#inner: not time dependent (male, )
