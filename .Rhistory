map("world",fill = TRUE, col = color[x])
map("world",add = TRUE) # plot again borders
legend("bottomleft",paste("Cluster",1:ncolors),
fill = color[1:ncolors],cex=1,
border = 0, bty = "o",box.col = 0)
}
plot_world(si[,1], ISO.3.code = PopPyrISO$Alpha.3.code)
plot_world(si[,1], ISO.3.code = PopPyrISO$Alpha.3.code)
library(maps)
# Country names in the data base 'world',
# from library maps, of each country in the data.frame used to do clusters
country.to.map <- match.map("world",country.names.world)
country.names.world
plot_world <- function(Cluster_Indicator, ISO.3.code = PopPyrISO$Alpha.3.code){
library(maps)
# Country names in the data base 'world',
# from library maps, of each country in the data.frame used to do clusters
country.names.world <- iso.expand(ISO.3.code)
# assigning polygons in "world" to each country
country.to.map <- match.map("world",country.names.world)
ncolors <- length(unique(Cluster_Indicator))
x <- hcl.k.star[country.to.map]
#with a color palette
# color <- terrain.colors(n=ncolors)
color <- palette.colors(n = ncolors, palette = "pastel 1")
map("world",fill = TRUE, col = color[x])
map("world",add = TRUE) # plot again borders
legend("bottomleft",paste("Cluster",1:ncolors),
fill = color[1:ncolors],cex=1,
border = 0, bty = "o",box.col = 0)
}
plot_world(si[,1])
library(maps)
# Country names in the data base 'world',
# from library maps, of each country in the data.frame used to do clusters
country.names.world <- iso.expand(ISO.3.code)
ISO.3.code = PopPyrISO$Alpha.3.code
library(maps)
# Country names in the data base 'world',
# from library maps, of each country in the data.frame used to do clusters
country.names.world <- iso.expand(ISO.3.code)
# assigning polygons in "world" to each country
country.to.map <- match.map("world",country.names.world)
ncolors <- length(unique(Cluster_Indicator))
Cluster_Indicator = si[,1]
ncolors <- length(unique(Cluster_Indicator))
ncolors
x <- hcl.k.star[country.to.map]
x <- hcluster[country.to.map] #hcl.k.star[country.to.map]
#with a color palette
# color <- terrain.colors(n=ncolors)
color <- palette.colors(n = ncolors, palette = "pastel 1")
map("world",fill = TRUE, col = color[x])
legend("bottomleft",paste("Cluster",1:ncolors),
fill = color[1:ncolors],cex=1,
border = 0, bty = "o",box.col = 0)
plot_world(si[,1])
plot_world <- function(Cluster_Indicator, ISO.3.code = PopPyrISO$Alpha.3.code){
library(maps)
Cluster_Indicator = si[,1]
# Country names in the data base 'world',
# from library maps, of each country in the data.frame used to do clusters
country.names.world <- iso.expand(ISO.3.code)
# assigning polygons in "world" to each country
country.to.map <- match.map("world",country.names.world)
ncolors <- length(unique(Cluster_Indicator))
x <- hcluster[country.to.map] #hcl.k.star[country.to.map]
#with a color palette
# color <- terrain.colors(n=ncolors)
color <- palette.colors(n = ncolors, palette = "pastel 1")
map("world",fill = TRUE, col = color[x])
map("world",add = TRUE) # plot again borders
legend("bottomleft",paste("Cluster",1:ncolors),
fill = color[1:ncolors],cex=1,
border = 0, bty = "o",box.col = 0)
}
plot_world(si[,1])
Cluster_Indicator = si[,1]
# Country names in the data base 'world',
# from library maps, of each country in the data.frame used to do clusters
country.names.world <- iso.expand(ISO.3.code)
# assigning polygons in "world" to each country
country.to.map <- match.map("world",country.names.world)
ncolors <- length(unique(Cluster_Indicator))
x <- hcluster[country.to.map] #hcl.k.star[country.to.map]
x
country.to.map
plot_world <- function(Cluster_Indicator, ISO.3.code = PopPyrISO$Alpha.3.code){
library(maps)
Cluster_Indicator = si[,1]
# Country names in the data base 'world',
# from library maps, of each country in the data.frame used to do clusters
country.names.world <- iso.expand(ISO.3.code)
# assigning polygons in "world" to each country
country.to.map <- match.map("world",country.names.world)
ncolors <- length(unique(Cluster_Indicator))
x <- hcluster[country.to.map] #hcl.k.star[country.to.map]
#with a color palette
# color <- terrain.colors(n=ncolors)
color <- palette.colors(n = ncolors, palette = "pastel 1")
map("world",fill = TRUE, col = color[x])
map("world",add = TRUE) # plot again borders
legend("bottomleft",paste("Cluster",1:ncolors),
fill = color[1:ncolors],cex=1,
border = 0, bty = "o",box.col = 0)
}
plot_world(0.2)
library(cluster)
kmedoids = pam(D.42,k.star,diss = TRUE)
library(cluster)
kmedoids = pam(D.42,3,diss = TRUE)
?pam
library(fpc)
?cluster.stats
library(cluster)
library(fpc)
kmedoids = pam(D.42,k,diss = TRUE)
cut = cutree(kmedoids,k)
#cut = cutree(kmedoids,k)
CH =  cluster.stats(D.42)
#cut = cutree(kmedoids,k)
CH =  cluster.stats(D.42,k)
#cut = cutree(kmedoids,k)
CH =  cluster.stats(D.42,kmedoids)#k)
#cut = cutree(kmedoids,k)
CH =  cluster.stats(D.42,k)#k)
k  =1
kmedoids = pam(D.42,k,diss = TRUE)
k  =2
kmedoids = pam(D.42,k,diss = TRUE)
kmedoids
kmedoids.clutering
kmedoids.clustering
k  =2
kmedoids = pam(D.42,k,diss = TRUE)
#cut = cutree(kmedoids,k)
CH =  cluster.stats(D.42,k)#k)
#cut = cutree(kmedoids,k)
CH =  cluster.stats(D.42)#k)
CH =  cluster.stats(D.42,clustering = k)
CH =  cluster.stats(D.42,3)
CH =  cluster.stats(D.42,10)
D.42
dim(D.42)
summary(D.42)
(189*188)/2
length(D.42)
kmedoids = pam(D.42,k,diss = TRUE)
CH =  cluster.stats(D.42,clustering = k)
CH =  cluster.stats(D.42,clustering = kmedoids)
#cut = cutree(kmedoids,k)
CH =  cluster.stats(D.42,clustering = kmedoids, silhouette = FALSE)#k)
library(ClusterR)
?Kmedoid
#kmedoids = pam(D.42,k.star,diss = TRUE)
km = pam(PopPyrISO[,6:47],k.star,metric="euclidean",stand = FALSE)
km
install.packages("factoextra")
install.packages("NbClust")
df = PopPyrISO[,(6:47)]
library(factoextra)
library(NbClust)
df = PopPyrISO[,(6:47)]
fviz_nbclust(df,kmeans,method="silhouette")+ labs(subtitle= "Silhouette method")
library(ggplot2)
df = PopPyrISO[,(6:47)]
fviz_nbclust(df,kmeans,method="silhouette")+ labs(subtitle= "Silhouette method")
#cut = numeric(9)
si.average = numeric(9)
k.v = c(2:10)
for (i in c(1:9)){
k = k.v[i]
cut = cutree(hcluster,k)
si <- silhouette(cut,D.42)
si.average[i] = mean(si[,3])
#plot(si,col = 2:(k+1))
}
plot(k.v,si.average,type="b")
?fviz_nbclust
fviz_nbclust(df,method="silhouette")+ labs(subtitle= "Silhouette method")
fviz_nbclust(df,hcut,method="silhouette")+ labs(subtitle= "Silhouette method")
# Hierarchical Cut method
fviz_nbclust(df,hcut,method="silhouette")+ labs(subtitle= "Hierarchical Cut method + Silhouette method")
#
fviz_nbclust(df,kmeans,method="silhouette")+ labs(subtitle= "Kmeans+ Silhouette method")
op <- par(mfrow = c(1,2))
# Hierarchical Cut method
fviz_nbclust(df,hcut,method="silhouette")+ labs(subtitle= "Hierarchical Cut method + Silhouette method")
#
fviz_nbclust(df,kmeans,method="silhouette")+ labs(subtitle= "Kmeans+ Silhouette method")
library(factoextra)
library(NbClust)
library(ggplot2)
df = PopPyrISO[,(6:47)]
op <- par(mfrow = c(1,2))
# Hierarchical Cut method
fviz_nbclust(df,hcut,method="silhouette")+ labs(subtitle= "Hierarchical Cut method + Silhouette method")
#
fviz_nbclust(df,kmeans,method="silhouette")+ labs(subtitle= "Kmeans+ Silhouette method")
?ClusterBootstrap
??ClusterBootstrap
??fviz_nbclust
??fpc::cluster.stats
CH =  cluster.stats(D.42,clustering = kmedoids, silhouette = FALSE)
CH =  cluster.stats(D.42,clustering = 3, silhouette = FALSE)
CH =  cluster.stats(D.42,clustering = k.v, silhouette = FALSE)
kmedoids = pam(D.42,k,diss = TRUE)
kmedoids
kmedoids.clustering
kmedoids$clustering
CH =  cluster.stats(D.42,clustering = kmedoids$clustering, silhouette = FALSE)
CH
CH$ch
k.v = c(2:10)
chindex = numeric(9)
kmedoids = pam(D.42,k,diss = TRUE)
CH =  cluster.stats(D.42,clustering = kmedoids$clustering, silhouette = FALSE)
for (i in c(1:9)){
k = i + 1
kmedoids = pam(D.42,k,diss = TRUE)
CH =  cluster.stats(D.42,clustering = kmedoids$clustering, silhouette = FALSE)
chindex[i] = CH$ch
#plot(si,col = 2:(k+1))
}
plot(k.v,chindex,type="b")
plot_world(km)
plot_world(chindex)
plot_world(CH)
plot_world(CH$clustering)
CH$clustering
k.star2 = 3
kmedoids = pam(D.42,k.star2,diss = TRUE)
plot_world(kmedoids$clustering)
CH =  cluster.stats(D.42,clustering = kmedoids$clustering, silhouette = FALSE)
plot_world(CH)
fviz_nbclust(df,kmedoids,method="silhouette")+ labs(subtitle= "Kmedoids+ Silhouette method")
# Hierarchical Cut method
fviz_nbclust(df,hcut,method="silhouette")+ labs(subtitle= "Hierarchical Cut method + Silhouette method")
#
fviz_nbclust(df,kmeans,method="silhouette")+ labs(subtitle= "Kmeans+ Silhouette method")
fviz_nbclust(df,kmedoids,method="silhouette")+ labs(subtitle= "Kmedoids+ Silhouette method")
chindex
k.star.ch = 3
k.star.ch = 3
kmedoids.3 = pam(D.42,k.star.ch,diss = TRUE)
CH.3 =  cluster.stats(D.42,clustering = kmedoids$clustering, silhouette = FALSE)
CH.3
CH.3$n.between
CH.3$n
CH.3$cluster.number
CH.3$cluster.size
View(CH)
View(CH)
k.star.ch = 3
kmedoids.3 = pam(D.42,k.star.ch,diss = TRUE)
CH.3 =  cluster.stats(D.42,clustering = kmedoids.3$clustering, silhouette = FALSE)
CH.3
kmedoids.3
kmedoids.3$medoids
k.star.ch = 3
kmedoids.3 = pam(D.42,k.star.ch,diss = TRUE)
CH.3 =  cluster.stats(D.42,clustering = kmedoids.3$clustering, silhouette = FALSE)
#medoidsCountry = kmedoids.3$medoids
# Plot the Pyramids of the medoid country
op <- par(mfrow = c(1,k.star))
for ( k in c(1:k.star)){
j = kmedoids.3$medoids[k]
plot.PopyrISO(PopPyrISO[j,(6:47)],PopPyrISO$English.short.name[j])
}
par(op)
table(kmedoids.3$clustering,cutree(hcluster,k.star))
knitr::opts_chunk$set(echo = TRUE)
p.from.beta <- function(beta,x){
lin.term <- beta[1] + x %*% beta[-1]
e.lt <- exp(lin.term)
p <- e.lt/(1+e.lt)
return(list(p=p,lt = lin.term))
}
knitr::opts_chunk$set(echo = TRUE)
trenal <- read.table("Trenal.XLS",sep=",")
trenal <- read.table("Trenal.XLS",sep=",")
setwd("C:/GIthub/LDA2023/LDA2023")
trenal <- read.table("Trenal.XLS",sep=",")
install.packages("readxl")
library("readxl")
trenal <- read.table("Trenal.XLS",sep=",")
trenal <- read_excel("Trenal.XLS")
getwd()
install.packages("readxl")
library("readxl")
trenal <- read_excel("Trenal.XLS")
install.packages("readxl")
getwd()
knitr::opts_chunk$set(echo = TRUE)
install.packages("readxl")
library("readxl")
trenal <- read_excel("Trenal.XLS")
summary(trenal)
dim(trenal)
#install.packages("readxl")
library("readxl")
trenal <- read_excel("Trenal.XLS")
summary(trenal)
dim(trenal)
View(trenal)
View(trenal)
trenal= trenal[,-18]
summary(trenal)
dim(trenal)
trenal.long = trenal[,13:20]
dim(trenal.long)
summary(trenal.long)
trenal.long %>% relocate(j,.after=i)
trenal.long %>% relocate(trenal.long$j,.after=trenal.long$i)
install.packages("magrittr") # package installations are only needed the first time you use it
install.packages("magrittr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")    # alternative installation of the %>%
install.packages("dplyr")    # alternative installation of the %>%
library(magrittr) # needs to be run every time you start R and want to use %>%
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
install.packages("dplyr")    # alternative installation of the %>%
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
trenal.long %>% relocate(trenal.long$j,.after=trenal.long$i)
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("magrittr") # package installations are only needed the first time you use it
#install.packages("dplyr")    # alternative installation of the %>%
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
trenal.long %>% relocate(trenal.long$j,.after=trenal.long$i)
trenal.long %>% relocate(j,.after=i)
View(trenal.long)
trenal.long %>% relocate(j,.after=id)
trenal.long %>%
relocate(j,.after=id)%>%
relocate(respons,.after=j)
trenal.long %>%
relocate(j,.after=id)%>%
relocate(time,after = i)%>%
relocate(respons,.after=time)
trenal.long %>%
relocate(j,.after=id)%>%
relocate(time,after = j)%>%
relocate(respons,.after=time)
trenal.long %>%
relocate(j,.after=id)%>%
relocate(time,.after = j)%>%
relocate(respons,.after=time)
trenal.long %>%
relocate(id)
trenal.long %>%
relocate(id) %>%
relocate(j,.after=id)%>%
relocate(time,.after = j)%>%
relocate(respons,.after=time)
max(id)
id.max
#install.packages("magrittr") # package installations are only needed the first time you use it
#install.packages("dplyr")    # alternative installation of the %>%
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
trenal.long %>%
relocate(id) %>%
relocate(j,.after=id)%>%
relocate(time,.after = j)%>%
relocate(respons,.after=time)
# Plot the raw data
plot(respons, age)
# Plot the raw data
plot(trenal.long$respons, trenal.long$age)
# Plot the raw data
plot(trenal.long$respons, trenal.long$time)
# Plot the raw data
plot(trenal.long$time,trenal.long$respons)
library(ggplot2)
library(nlme)
library(lme4)
#Plot data
ggplot(data, aes(x=trenal.long$time, y=trenal.long$respons)) + geom_point()
#Plot data
ggplot(ternal.long, aes(x=trenal.long$time, y=trenal.long$respons)) + geom_point()
#Plot data
ggplot(trenal.long, aes(x=trenal.long$time, y=trenal.long$respons)) + geom_point()
data = trenal.long
#Plot data
ggplot(data, aes(x=data$time, y=data$respons)) + geom_point()
#Plot data with lm line
ggplot(data, aes(x=week, y=weight)) + geom_point() + geom_smooth(method="lm")
#Plot data with lm line
ggplot(data, aes(x=data$time, y=data$respons)) + geom_point() + geom_smooth(method="lm")
#Lm
lm<-lm(response~time,data=data)
#Lm
lm<-lm(respons~time,data=data)
summary(lm)
#Plot individual data
ggplot(data, aes(x=time, y=respons, group=ID,color=ID)) + geom_point()
#Lm
lm<-lm(respons~time,data=data)
summary(lm)
#Plot individual data
ggplot(data, aes(x=time, y=respons, group=MALE,color=MALE)) + geom_point()
#Plot individual data
ggplot(data, aes(x=time, y=respons, group=male,color=male)) + geom_point()
#Plot individual data
ggplot(data, aes(x=time, y=respons, group=reject,color=reject)) + geom_point()
#Plot individual data
ggplot(data, aes(x=time, y=respons, group=age,color=age)) + geom_point()
#Plot individual data
ggplot(data, aes(x=time, y=respons, group=cardio,color=cardio)) + geom_point()
trenal.long$id = as.factor(trenal.long$id)
trenal.long$id = as.factor(trenal.long$id)
trenal.long$male = as.factor(trenal.long$male)
trenal.long$cardio = as.factor(trenal.long$cardio)
trenal.long$reject = as.factor(trenal.long$rejct)
trenal.long$reject = as.factor(trenal.long$reject)
# Plot the raw data
plot(trenal.long$time,trenal.long$respons)
library(ggplot2)
library(nlme)
library(lme4)
data = trenal.long
#Plot data
ggplot(data, aes(x=time, y=respons)) + geom_point()
#Plot data with lm line
ggplot(data, aes(x=time, y=respons)) + geom_point() + geom_smooth(method="lm")
summary(trenal.long)
trenal.long$j = as.factor(trenal.long$j)
trenal.long$id = as.factor(trenal.long$id)
trenal.long$j = as.factor(trenal.long$j)
trenal.long$male = as.factor(trenal.long$male)
trenal.long$cardio = as.factor(trenal.long$cardio)
trenal.long$reject = as.factor(trenal.long$reject)
summary(trenal.long)
max(trenal.long$id)
length(unique(id))
length(unique(as.vector(id)))
length(unique(as.vector(trenal.long$id)))
length(unique(trenal.long$id))
#lme
data = trenal.long
lme<-lme(respons~time, random=~time|id,data=data)
#lme
data = trenal.long
lme<-lme(respons~time+age+male+reject, random=~age,data=data)
data<-data.frame(ID=c(rep(1,3),rep(2,3),rep(3,3),rep(4,3)),week=c(rep(c(0,1,2),4)),
weight=c(100,98,97,95,94,87,82,80,80,78,77,75))
data$ID<-as.factor(data$ID)
View(data)
View(data)
lme<-lme(respons~time+age+male+reject+cardio,data=data)
#lme
data = trenal.long
lme<-lme(respons~time+age+male+reject+cardio,data=data)
#Spaghetti Plot
ggplot(data, aes(x=time, y=respons, group=male,color=male)) + geom_point() +geom_line()
#Spaghetti with fitted lines
ggplot(data, aes(x=time, y=respons, group=male,color=male)) + geom_point()+ geom_smooth(method="lm",se=F) +geom_line()
#Plot individual data
ggplot(data, aes(x=time, y=respons, group=cardio,color=cardio)) + geom_point()  +geom_line()
#Plot individual data
ggplot(data, aes(x=time, y=respons, group=id,color=id)) + geom_point()  +geom_line()
data[data$id <= 5,]
ggplot(data[data$id == (1,2,3,4,5),], aes(x=time, y=respons, group=id,color=id)) + geom_point()  +geom_line()
data[data$id == (1,2,3,4,5),]
data[data$id == ('1','2','3','4','5'),]
data[data$id == c('1','2','3','4','5'),]
ggplot(data[data$id == c('1','2','3'),], aes(x=time, y=respons, group=id,color=id)) + geom_point()  +geom_line()
ggplot(data[data$id == c('1','2','3','4','5'),], aes(x=time, y=respons, group=id,color=id)) + geom_point()  +geom_line()
lme <- lme(repsons ~ time + age)
#lme
data = trenal.long
lme <- lme(repsons ~ time + ag)
lme <- lme(repsons ~ time + age)
lme <- lme(repsons ~ time + id)
lme <- lme(repsons ~ time )
lme <- lme(repsons ~ time + age ,data=data)
#lme
data = trenal.long
lme <- lme(repsons ~ time + age ,data=data)
view(data)
#lme
data = trenal.long
View(data)
View(trenal.long)
#install.packages("magrittr") # package installations are only needed the first time you use it
#install.packages("dplyr")    # alternative installation of the %>%
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
trenal.long %>%
relocate(id) %>%
relocate(j,.after=id)%>%
relocate(time,.after = j)%>%
relocate(respons,.after=time)
trenal.long$id = as.factor(trenal.long$id)
trenal.long$j = as.factor(trenal.long$j)
trenal.long$male = as.factor(trenal.long$male)
trenal.long$cardio = as.factor(trenal.long$cardio)
trenal.long$reject = as.factor(trenal.long$reject)
summary(trenal.long)
length(unique(trenal.long$id))
View(trenal.long)
trenal.long %>%
relocate(id) %>%
relocate(j,.after=id)%>%
relocate(time,.after = j)%>%
relocate(respons,.after=time)
View(trenal.long)
View(trenal.long)
