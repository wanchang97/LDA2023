lwd=3,ylim=c(0,.55))
b <- 3.49 * sigma.mixt * n^(-1/3)
S.hists <- matrix(0,nrow = length(axis.x),ncol=S)
for (i in seq(1,S)){
x <- sim.mixt(n=n, k=2, mu=mu, sigma=sigma, alpha=alpha, gr=F)
nc <- ceiling(diff(range(x))/b)
boxes <- seq(min(x),max(x),length=nc+2)
#   hist(x, breaks=cajas,freq=F, add=TRUE,lty=3)
tmp <- hist(x, breaks=boxes, plot=FALSE)
box.axis.x <- findInterval(axis.x,boxes)+1
fH <- c(0,tmp$density,0)
S.hists[,i]<-fH[box.axis.x]
lines(axis.x,S.hists[,i],lty=3,col="grey")
}
lines(mixt.2$x, mixt.2$fx, lwd=3)
m.S.hists <- apply(S.hists,1,mean)
sd.S.hists <- apply(S.hists,1,sd)
lines(axis.x,m.S.hists,col=2,lwd=2)
lines(axis.x,m.S.hists+2*sd.S.hists,col="pink",lwd=2,lty=2)
lines(axis.x,m.S.hists-2*sd.S.hists,col="pink",lwd=2,lty=2)
# large
mixt.2 <- graph.mixt(k=2, mu=mu, sigma=sigma, alpha=alpha,
lwd=3,ylim=c(0,.55))
b <- (3.49 * sigma.mixt * n^(-1/3))*3
for (i in seq(1,S)){
x <- sim.mixt(n=n, k=2, mu=mu, sigma=sigma, alpha=alpha, gr=F)
nc <- ceiling(diff(range(x))/b)
boxes <- seq(min(x),max(x),length=nc+2)
#   hist(x, breaks=cajas,freq=F, add=TRUE,lty=3)
tmp <- hist(x, breaks=boxes, plot=FALSE)
box.axis.x <- findInterval(axis.x,boxes)+1
fH <- c(0,tmp$density,0)
S.hists[,i]<-fH[box.axis.x]
lines(axis.x,S.hists[,i],lty=3,col="grey")
}
lines(mixt.2$x, mixt.2$fx, lwd=3)
m.S.hists <- apply(S.hists,1,mean)
sd.S.hists <- apply(S.hists,1,sd)
lines(axis.x,m.S.hists,col=2,lwd=2)
lines(axis.x,m.S.hists+2*sd.S.hists,col="pink",lwd=2,lty=2)
lines(axis.x,m.S.hists-2*sd.S.hists,col="pink",lwd=2,lty=2)
par(op)
set.seed(123)
n <- 100
mu <- c(0,3/2)
sigma <- c(1,1/3)
alpha <- c(3/4,1/4)
out <- graph.mixt(k=2,mu=mu,sigma=sigma,alpha=alpha,col=4,ylim=c(0,.45))
x <- sim.mixt(n=n,k=2,mu=mu,sigma=sigma,alpha=alpha,gr = F)
h <- 0.3/2
lines(density(x,bw=h,kernel="rectangular"))
points(x,0*x,pch="|")
abline(h=0,col=8)
set.seed(123)
n <- 100
mu <- c(0,3/2)
sigma <- c(1,1/3)
alpha <- c(3/4,1/4)
out <- graph.mixt(k=2,mu=mu,sigma=sigma,alpha=alpha,col=4,ylim=c(0,0.45))
x <- sim.mixt(n=n,k=2,mu=mu,sigma=sigma,alpha=alpha,gr= F)
h<- 0.3
lines(density(x,bw=h,kernel='gaussian'))
points(x,0*x,pch = "|")
abline(h=0,col=8)
S <- 30
n <- 100
mu <- c(0,3/2)
sigma <- c(1,1/3)
alpha <- c(3/4,1/4)
mixt.2 <- graph.mixt(k=2,mu=mu,sigma=sigma,alpha=alpha,lwd=3,ylim=c(0,0.55))
for (i in seq(1,S)){
x <- sim.mixt(n=n,k=2,mu=mu,sigma=sigma,alpha=alpha ,gr=F)
lines(density(x,adjust=.75),col="grey")
}
lines(mixt.2$x, mixt.2$fx,lwd=3)# true density
# Defining the function variability_plot_kernel
variability_plot_kernel <- function(k=1,
mu = seq(-2*(k-1),2*(k-1),length=k),
sigma=seq(1,1,length=k),
alpha = seq(1/k,1/k,length=k),
S = 20,n=100,r=100,h="nrd0",...){
# Computing the density of the mixture of normals
k <- length(mu)
minx <- min(mu-3*sigma)
maxx <- max(mu+3*sigma)
y <- seq(minx,maxx,length=r)
fy <- 0*y
Salpha <- sum(alpha)
for (i in 1:k){
p <- alpha[i]/Salpha
fy <- fy + p*dnorm(y,mu[i],sigma[i])
}
hfy <- matrix(0,S,r)
for (i in 1:S){
x <- sim.mixt(n=n,k=k,mu=mu,sigma=sigma,alpha=alpha)
dx <- density(x,bw=h,from=minx,to= maxx,n=r,...)
hfy[i,] <- dx$y
}
m_hf <- apply(hfy,2,mean)
sd_hf <- apply(hfy,2,sd)
delta <- y[2]-y[1]
ECM <- sd_hf^2+(fy-m_hf)^2
MISE <- sum(ECM)*delta
#[MISE,naux] <- simpson(ECM,minx,maxx)
plot(y,fy,ty="l",  lwd=3, ...)
title(main=paste("MISE= ",MISE,sep=""))
lines(y,m_hf,col=2)
L <- m_hf-1.96*sd_hf
U <- m_hf+1.96*sd_hf
lines(y,L,col=3,lty=2)
lines(y,U,col=3,lty=2)
return(list(y=y,fy=fy,m_hf=m_hf,sd_hf=sd_hf,MISE=MISE)
}
# Defining the function variability_plot_kernel
variability_plot_kernel <- function(k=1,
mu = seq(-2*(k-1),2*(k-1),length=k),
sigma=seq(1,1,length=k),
alpha = seq(1/k,1/k,length=k),
S = 20,n=100,r=100,h="nrd0",...){
# Computing the density of the mixture of normals
k <- length(mu)
minx <- min(mu-3*sigma)
maxx <- max(mu+3*sigma)
y <- seq(minx,maxx,length=r)
fy <- 0*y
Salpha <- sum(alpha)
for (i in 1:k){
p <- alpha[i]/Salpha
fy <- fy + p*dnorm(y,mu[i],sigma[i])
}
hfy <- matrix(0,S,r)
for (i in 1:S){
x <- sim.mixt(n=n,k=k,mu=mu,sigma=sigma,alpha=alpha)
dx <- density(x,bw=h,from=minx,to= maxx,n=r,...)
hfy[i,] <- dx$y
}
m_hf <- apply(hfy,2,mean)
sd_hf <- apply(hfy,2,sd)
delta <- y[2]-y[1]
ECM <- sd_hf^2+(fy-m_hf)^2
MISE <- sum(ECM)*delta
#[MISE,naux] <- simpson(ECM,minx,maxx)
plot(y,fy,ty="l",  lwd=3, ...)
title(main=paste("MISE= ",MISE,sep=""))
lines(y,m_hf,col=2)
L <- m_hf-1.96*sd_hf
U <- m_hf+1.96*sd_hf
lines(y,L,col=3,lty=2)
lines(y,U,col=3,lty=2)
return(list(y=y,fy=fy,m_hf=m_hf,sd_hf=sd_hf,MISE=MISE))
}
# Defining the function variability_plot_kernel
variability_plot_kernel <- function(k=1,
mu = seq(-2*(k-1),2*(k-1),length=k),
sigma=seq(1,1,length=k),
alpha = seq(1/k,1/k,length=k),
S = 20,n=100,r=100,h="nrd0",...){
# Computing the density of the mixture of normals
k <- length(mu)
minx <- min(mu-3*sigma)
maxx <- max(mu+3*sigma)
y <- seq(minx,maxx,length=r)
fy <- 0*y
Salpha <- sum(alpha)
for (i in 1:k){
p <- alpha[i]/Salpha
fy <- fy + p*dnorm(y,mu[i],sigma[i])
}
hfy <- matrix(0,S,r)
for (i in 1:S){
x <- sim.mixt(n=n,k=k,mu=mu,sigma=sigma,alpha=alpha)
dx <- density(x,bw=h,from=minx,to= maxx,n=r,...)
hfy[i,] <- dx$y
}
m_hf <- apply(hfy,2,mean)
sd_hf <- apply(hfy,2,sd)
delta <- y[2]-y[1]
ECM <- sd_hf^2+(fy-m_hf)^2
MISE <- sum(ECM)*delta
#[MISE,naux] <- simpson(ECM,minx,maxx)
plot(y,fy,ty="l",  lwd=3, ...)
title(main=paste("MISE= ",MISE,sep=""))
lines(y,m_hf,col=2)
L <- m_hf-1.96*sd_hf
U <- m_hf+1.96*sd_hf
lines(y,L,col=3,lty=2)
lines(y,U,col=3,lty=2)
return(list(y=y,fy=fy,m_hf=m_hf,sd_hf=sd_hf,MISE=MISE))
}
S <- 30
n <- 100
mu <- c(0,3/2)
sigma <- c(1,1/3)
alpha <- c(3/4,1/4)
r <- 100
op<-par(mfrow=c(1,3))
vpk.1 <- variability_plot_kerenl(mu=mu, sigma=sigma, alpha=alpha,
S=S, n=n, r=r, h="nrd0", adjust=.4,ylim=c(0,0.55))
# Defining the function variability_plot_kernel
variability_plot_kernel <- function(k=1,
mu = seq(-2*(k-1),2*(k-1),length=k),
sigma=seq(1,1,length=k),
alpha = seq(1/k,1/k,length=k),
S = 20,n=100,r=100,h="nrd0",...){
# Computing the density of the mixture of normals
k <- length(mu)
minx <- min(mu-3*sigma)
maxx <- max(mu+3*sigma)
y <- seq(minx,maxx,length=r)
fy <- 0*y
Salpha <- sum(alpha)
for (i in 1:k){
p <- alpha[i]/Salpha
fy <- fy + p*dnorm(y,mu[i],sigma[i])
}
hfy <- matrix(0,S,r)
for (i in 1:S){
x <- sim.mixt(n=n,k=k,mu=mu,sigma=sigma,alpha=alpha)
dx <- density(x,bw=h,from=minx,to= maxx,n=r,...)
hfy[i,] <- dx$y
}
m_hf <- apply(hfy,2,mean)
sd_hf <- apply(hfy,2,sd)
delta <- y[2]-y[1]
ECM <- sd_hf^2+(fy-m_hf)^2
MISE <- sum(ECM)*delta
#[MISE,naux] <- simpson(ECM,minx,maxx)
plot(y,fy,ty="l",  lwd=3, ...)
title(main=paste("MISE= ",MISE,sep=""))
lines(y,m_hf,col=2)
L <- m_hf-1.96*sd_hf
U <- m_hf+1.96*sd_hf
lines(y,L,col=3,lty=2)
lines(y,U,col=3,lty=2)
return(list(y=y,fy=fy,m_hf=m_hf,sd_hf=sd_hf,MISE=MISE))
}
S <- 30
n <- 100
mu <- c(0,3/2)
sigma <- c(1,1/3)
alpha <- c(3/4,1/4)
r <- 100
op<-par(mfrow=c(1,3))
vpk.1 <- variability_plot_kerenl(mu=mu, sigma=sigma, alpha=alpha,
S=S, n=n, r=r, h="nrd0", adjust=.4,ylim=c(0,0.55))
S <- 30
n <- 100
mu <- c(0,3/2)
sigma <- c(1,1/3)
alpha <- c(3/4,1/4)
r <- 100
op<-par(mfrow=c(1,3))
vpk.1 <- variability_plot_kernel(mu=mu, sigma=sigma, alpha=alpha,
S=S, n=n, r=r, h="nrd0", adjust=.4,ylim=c(0,0.55))
vpk.2 <- variability_plot_kernel(mu=mu, sigma=sigma, alpha=alpha,
S=S, n=n, r=r, h="nrd0", adjust=.75,ylim=c(0,0.55))
vpk.3 <- variability_plot_kernel(mu=mu, sigma=sigma, alpha=alpha,
S=S, n=n, r=r, h="nrd0", adjust=1.5,ylim=c(0,0.55))
# Defining the function variability_plot_kernel
#
variability_plot_kerenl <- function(k=1,
mu=seq(-2*(k-1),2*(k-1),length=k),
sigma=seq(1,1,length=k),
alpha=seq(1/k,1/k,length=k),
S=20, n=100, r=100,
h="nrd0", ...){
# computing the density of thr mixture of normals
k <- length(mu)
minx <- min(mu-3*sigma)
maxx <- max(mu+3*sigma)
y <- seq(minx,maxx,length=r)
fy <- 0*y
Salpha<-sum(alpha)
for(i in 1:k){
p<-alpha[i]/Salpha
#    fy <- fy + p*exp(-.5*((y-mu[i])/sigma[i])^2)/(sqrt(2*pi)*sigma[i])
fy <- fy + p*dnorm(y,mu[i],sigma[i])
}
hfy <- matrix(0,S,r)
for (i in 1:S){
x <- sim.mixt(n=n,k=k,mu=mu,sigma=sigma,alpha=alpha)
dx <- density(x, bw=h, from=minx, to=maxx, n=r, ...)
hfy[i,] <- dx$y
}
m_hf <- apply(hfy,2,mean)
sd_hf <- apply(hfy,2,sd)
delta <- y[2]-y[1]
ECM <- sd_hf^2+(fy-m_hf)^2
MISE <- sum(ECM)*delta
#[MISE,naux] <- simpson(ECM,minx,maxx)
plot(y,fy,ty="l",  lwd=3, ...)
title(main=paste("MISE= ",MISE,sep=""))
lines(y,m_hf,col=2)
L <- m_hf-1.96*sd_hf
U <- m_hf+1.96*sd_hf
lines(y,L,col=3,lty=2)
lines(y,U,col=3,lty=2)
return(list(y=y,fy=fy,m_hf=m_hf,sd_hf=sd_hf,MISE=MISE))
}
S <- 30
n <- 100
mu <- c(0,3/2)
sigma <- c(1,1/3)
alpha <- c(3/4,1/4)
r <- 100
op<-par(mfrow=c(1,3))
vpk.1 <- variability_plot_kernel(mu=mu, sigma=sigma, alpha=alpha,
S=S, n=n, r=r, h="nrd0", adjust=.4,ylim=c(0,0.55))
vpk.2 <- variability_plot_kernel(mu=mu, sigma=sigma, alpha=alpha,
S=S, n=n, r=r, h="nrd0", adjust=.75,ylim=c(0,0.55))
vpk.3 <- variability_plot_kernel(mu=mu, sigma=sigma, alpha=alpha,
S=S, n=n, r=r, h="nrd0", adjust=1.5,ylim=c(0,0.55))
# Defining the function variability_plot_kernel
#
variability_plot_kernel <- function(k=1,
mu=seq(-2*(k-1),2*(k-1),length=k),
sigma=seq(1,1,length=k),
alpha=seq(1/k,1/k,length=k),
S=20, n=100, r=100,
h="nrd0", ...){
# computing the density of thr mixture of normals
k <- length(mu)
minx <- min(mu-3*sigma)
maxx <- max(mu+3*sigma)
y <- seq(minx,maxx,length=r)
fy <- 0*y
Salpha<-sum(alpha)
for(i in 1:k){
p<-alpha[i]/Salpha
#    fy <- fy + p*exp(-.5*((y-mu[i])/sigma[i])^2)/(sqrt(2*pi)*sigma[i])
fy <- fy + p*dnorm(y,mu[i],sigma[i])
}
hfy <- matrix(0,S,r)
for (i in 1:S){
x <- sim.mixt(n=n,k=k,mu=mu,sigma=sigma,alpha=alpha)
dx <- density(x, bw=h, from=minx, to=maxx, n=r, ...)
hfy[i,] <- dx$y
}
m_hf <- apply(hfy,2,mean)
sd_hf <- apply(hfy,2,sd)
delta <- y[2]-y[1]
ECM <- sd_hf^2+(fy-m_hf)^2
MISE <- sum(ECM)*delta
#[MISE,naux] <- simpson(ECM,minx,maxx)
plot(y,fy,ty="l",  lwd=3, ...)
title(main=paste("MISE= ",MISE,sep=""))
lines(y,m_hf,col=2)
L <- m_hf-1.96*sd_hf
U <- m_hf+1.96*sd_hf
lines(y,L,col=3,lty=2)
lines(y,U,col=3,lty=2)
return(list(y=y,fy=fy,m_hf=m_hf,sd_hf=sd_hf,MISE=MISE))
}
S <- 30
n <- 100
mu <- c(0,3/2)
sigma <- c(1,1/3)
alpha <- c(3/4,1/4)
r <- 100
op<-par(mfrow=c(1,3))
vpk.1 <- variability_plot_kernel(mu=mu, sigma=sigma, alpha=alpha,
S=S, n=n, r=r, h="nrd0", adjust=.4,ylim=c(0,0.55))
vpk.2 <- variability_plot_kernel(mu=mu, sigma=sigma, alpha=alpha,
S=S, n=n, r=r, h="nrd0", adjust=.75,ylim=c(0,0.55))
vpk.3 <- variability_plot_kernel(mu=mu, sigma=sigma, alpha=alpha,
S=S, n=n, r=r, h="nrd0", adjust=1.5,ylim=c(0,0.55))
library(sm)
op <- par(mfrow=c(1,2))
sm.density(cbind(Boston$lstat,Boston$rm),h=c(1.5,.15),phi=30,theta=60,col=5,
xlab="lstat",ylab="rm",zlab="density")
sm.density(cbind(Boston$lstat,Boston$rm),h=c(1.5,.15),display="slice",
xlab="lstat",ylab="rm")
sm.density(cbind(Boston$lstat,Boston$rm),h=c(1.5,.15),display="slice",add=T,col=2,props=c(90))
points(Boston$lstat,Boston$rm,pch=19,cex=.3)
library(rgl)
install.packages("rgl")
library(rgl)
plot(Boston$lstat,Boston$rm)
out <- sm.density(cbind(Boston$lstat,Boston$rm),
h=c(1.5,.15),display="none")
persp3d(x=out$eval.points[,1],
y=out$eval.points[,2],
z=out$estimate,col="lightblue")
op <- par(mfrow=c(1,2))
sm.density(cbind(Boston$lstat,Boston$rm),h=c(1.5,.15),phi=30,theta=60,col=5,
xlab="lstat",ylab="rm",zlab="density")
sm.density(cbind(Boston$lstat,Boston$rm),h=c(1.5,.15),display="slice",
xlab="lstat",ylab="rm")
sm.density(cbind(Boston$lstat,Boston$rm),h=c(1.5,.15),display="slice",add=T,col=2,props=c(90))
points(Boston$lstat,Boston$rm,pch=19,cex=.3)
setwd("C:/Users/wanch/OneDrive/桌面/UPC master course/LongitudinalDataAnalysis/github/LDA2023")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("readxl")
library("readxl")
setwd("C:/Users/wanch/OneDrive/桌面/UPC master course/LongitudinalDataAnalysis/github/LDA2023")
install.packages("readxl")
library("readxl")
trenal <- read_excel("Trenal.XLS")
summary(trenal)
View(trenal)
trenal= trenal[,-18]
summary(trenal)
dim(trenal)
trenal.long = trenal[,13:20]
summary(trenal.long)
dim(trenal.long)
#install.packages("magrittr") # package installations are only needed the first time you use it
#install.packages("dplyr")    # alternative installation of the %>%
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
data <- trenal.long %>%
relocate(id) %>%
relocate(j,.after=id)%>%
relocate(time,.after = j)%>%
relocate(respons,.after=time)
trenal.long$id = as.factor(trenal.long$id)
trenal.long$j = as.factor(trenal.long$j)
trenal.long$male = as.factor(trenal.long$male)
trenal.long$cardio = as.factor(trenal.long$cardio)
trenal.long$reject = as.factor(trenal.long$reject)
summary(trenal.long)
length(unique(trenal.long$id))
# Plot the raw data
plot(trenal.long$time,trenal.long$respons)
View(trenal)
#install.packages("magrittr") # package installations are only needed the first time you use it
#install.packages("dplyr")    # alternative installation of the %>%
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
data <- trenal.long %>%
relocate(id) %>%
relocate(j,.after=id)%>%
relocate(time,.after = j)%>%
relocate(respons,.after=time)
trenal.long$id = as.factor(trenal.long$id)
trenal.long$j = as.factor(trenal.long$j)
trenal.long$male = as.factor(trenal.long$male)
trenal.long$cardio = as.factor(trenal.long$cardio)
trenal.long$reject = as.factor(trenal.long$reject)
summary(trenal.long)
length(unique(trenal.long$id))
View(data)
library(ggplot2)
library(nlme)
library(lme4)
#Plot data
ggplot(data, aes(x=time, y=respons)) + geom_point()
#Plot data with lm line
ggplot(data, aes(x=time, y=respons)) + geom_point() + geom_smooth(method="lm")
#Select a sample of data to plot
set.seed(1)
selected <- sample(1:length(unique(trenal.long$id)),30,replace=T) # random samples and permutations
#selected.vector = as.vector(selected)
data.selected = data[(data$id %in% c(selected)), ]
#Select a sample of data to plot
set.seed(1)
selected <- sample(1:length(unique(trenal.long$id)),30,replace=T) # random samples and permutations
#selected.vector = as.vector(selected)
data.selected = data[(data$id %in% c(selected)), ]
View(data.selected)
#data.selected = data[data$id == selected.vector,]# why the dim(data.selected) = 12 x 8
# Plot the respons over time for different id
# If some responses are not available, NA
ggplot(data.selected, aes(x=time, y=respons, group=id,color=id)) + geom_point()  +geom_line()
#ggplot(data.selected, aes(x=time, y=na.pass(respons), group=id,color=id)) + geom_point()  +geom_line()
# Box plot
p <- ggplot(data, aes(x=time, y=respons,group =time, color = time)) +
geom_boxplot()
p
#Plot individual data
ggplot(data, aes(x=time, y=respons, group=reject,color=reject)) + geom_point()
# Box plot
p <- ggplot(data, aes(x=time, y=respons,group = reject, color = reject)) +
geom_boxplot()
p
# Box plot
p <- ggplot(data, aes(x=reject, y=respons,group = reject, color = reject)) +
geom_boxplot()
p
data.male =  data[(data$male == "1" ), ]
data.female =  data[(data$male == "0" ), ]
data.male.selected =  data[(data$male == "1" & data$id %in% c(selected)), ]
data.female.selected =  data[(data$male == "0" & data$id %in% c(selected)), ]
data.male =  data[(data$male == "1" ), ]
data.female =  data[(data$male == "0" ), ]
data.male.selected =  data[(data$male == "1" & data$id %in% c(selected)), ]
data.female.selected =  data[(data$male == "0" & data$id %in% c(selected)), ]
ggplot(data.male.selected, aes(x=time, y =respons, group=id,color=id)) + geom_point()  +geom_line()+ggtitle("Spaghetti plot for male")+ geom_smooth(method="lm")
ggplot(data.female.selected, aes(x=time, y= respons, group=id,color=id)) + geom_point()  +geom_line()+ggtitle("Spaghetti plot for female")+ geom_smooth(method="lm")
p <- ggplot(data, aes(x=male, y=respons,group = male, color = male)) +
geom_boxplot()
p
p.box.male <- ggplot(data.male, aes(x=time, y=respons,group = time, color = time)) +
geom_boxplot()
p.box.male
p.box.female <- ggplot(data.female, aes(x=time, y=respons,group = time, color = time)) +
geom_boxplot()
p.box.female
p <- ggplot(data, aes(x=male, y=respons,fill= male ,group = male, color = male)) +
geom_boxplot()
p
p <- ggplot(data, aes(x=time, y=respons,fill= male ,group = male, color = male)) +
geom_boxplot()
p
p <- ggplot(data, aes(x=time, y=respons,fill= male)) +
geom_boxplot()
p
trenal.wide = trenal[,1:17]
summary(trenal.wide)
# scatter plot matrix
pairs(~HC0+HC06+HC1+HC2+HC3+HC4+HC5+HC6+HC7+HC8+HC9+HC10,data=trenal.wide,
main="Simple Scatterplot Matrix")
